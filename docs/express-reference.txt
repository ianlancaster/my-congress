EXPRESS.JS REFERENCE GUIDE

express()
	Description:
    Creates an Express application. The express() function is a top-level function exported by the express module.

	Methods:
		express.static(root, [options]) --> This is the only built-in middleware function in Express. It serves static files and is based on serve-static. The root argument refers to the root directory from which the static assets are to be served. The file to serve will be determined by combining	req.url with the provided root directory. When a file is not found, instead of sending a 404 response, this module will instead call next() to move on to the next middleware, allowing for stacking and fall-backs.
		express.Router([options]) --> Creates a new router object.

Application
	Description:
		The app object conventionally denotes the Express application. Create it by calling the top-level express() function exported by the Express module:
		The app object has methods for:
			Routing HTTP requests; see for example, app.METHOD and app.param.
			Configuring middleware; see app.route.
			Rendering HTML views; see app.render.
			Registering a template engine; see app.engine.
			It also has settings (properties) that affect how the application behaves; for more information, see Application settings.

	Properties:
		app.locals --> The app.locals object has properties that are local variables within the application.
		app.mountpath --> The app.mountpath property contains one or more path patterns on which a sub-app was mounted.

	Events:
		app.on('mount', callback(parent)) --> The mount event is fired on a sub-app, when it is mounted on a parent app. The parent app is passed to the callback function.

	Methods:
		app.all(path, callback [, callback ...]) --> This method is like the standard app.METHOD() methods, except it matches all HTTP verbs.
		app.delete(path, callback [, callback ...]) --> Routes HTTP DELETE requests to the specified path with the specified callback functions. For more information, see the routing guide.
		app.disable(name) --> Sets the Boolean setting name to false, where name is one of the properties from the app settings table. Calling app.set('foo', false) for a Boolean property is the same as calling app.disable('foo').
		app.enable(name) --> Sets the Boolean setting name to true, where name is one of the properties from the app settings table. Calling app.set('foo', true) for a Boolean property is the same as calling app.enable('foo').
		app.engine(ext, callback) --> Registers the given template engine callback as ext. By default, Express will require() the engine based on the file extension. For example, if you try to render a “foo.pug” file, Express invokes the following internally, and caches the require() on subsequent calls to increase performance.
		app.get(name) --> Returns the value of name app setting, where name is one of strings in the app settings table.
		app.get(path, callback [, callback ...]) --> Routes HTTP GET requests to the specified path with the specified callback functions.
		app.listen(path, [callback]) --> Starts a UNIX socket and listens for connections on the given path. This method is identical to Node’s http.Server.listen().
		app.listen(port, [hostname], [backlog], [callback]) --> Binds and listens for connections on the specified host and port. This method is identical to Node’s http.Server.listen().
		app.METHOD(path, callback [, callback ...]) --> Routes an HTTP request, where METHOD is the HTTP method of the request, such as GET, PUT, POST, and so on, in lowercase. Thus, the actual methods are app.get(), app.post(), app.put(), and so on. See Routing methods below for the complete list.
			Express supports the following routing methods corresponding to the HTTP methods of the same names: checkout, copy, delete, get, head, lock, merge, mkactivity, mkcol, move, m-search, notify, options, patch, post, purge, put, report, search, subscribe, trace, unlock, unsubscribe
		app.param([name], callback) --> Add callback triggers to route parameters, where name is the name of the parameter or an array of them, and callback is the callback function. The parameters of the callback function are the request object, the response object, the next middleware, the value of the parameter and the name of the parameter, in that order.
		app.path() --> Returns the canonical path of the app, a string.
		app.post(path, callback [, callback ...]) --> Routes HTTP POST requests to the specified path with the specified callback functions. For more information, see the routing guide.
		app.put(path, callback [, callback ...]) --> Routes HTTP PUT requests to the specified path with the specified callback functions.
		app.render(view, [locals], callback) --> Returns the rendered HTML of a view via the callback function. It accepts an optional parameter that is an object containing local variables for the view. It is like res.render(), except it cannot send the rendered view to the client on its own.
		app.route(path) --> Returns an instance of a single route, which you can then use to handle HTTP verbs with optional middleware. Use app.route() to avoid duplicate route names (and thus typo errors).
		app.set(name, value) --> Assigns setting name to value, where name is one of the properties from the app settings table.
		app.use([path,] callback [, callback...]) --> Mounts the specified middleware function or functions at the specified path: the middleware function is executed when the base of the requested path matches path.

Request
	Description:
		The req object represents the HTTP request and has properties for the request query string, parameters, body, HTTP headers, and so on. In this documentation and by convention, the object is always referred to as req (and the HTTP response is res) but its actual name is determined by the parameters to the callback function in which you’re working.

	Properties:
		req.app --> This property holds a reference to the instance of the Express application that is using the middleware.
		req.baseUrl --> The URL path on which a router instance was mounted. The req.baseUrl property is similar to the mountpath property of the app object, except app.mountpath returns the matched path pattern(s).
		req.body --> Contains key-value pairs of data submitted in the request body. By default, it is undefined, and is populated when you use body-parsing middleware such as body-parser and multer.
		req.cookies --> When using cookie-parser middleware, this property is an object that contains cookies sent by the request. If the request contains no cookies, it defaults to {}.
		req.fresh --> Indicates whether the request is “fresh.” It is the opposite of req.stale. It is true if the cache-control request header doesn’t have a no-cache directive and any of the following are true:
		req.hostname --> Contains the hostname derived from the Host HTTP header.
		req.ip --> Contains the remote IP address of the request.
		req.ips --> When the trust proxy setting does not evaluate to false, this property contains an array of IP addresses specified in the X-Forwarded-For request header. Otherwise, it contains an empty array. This header can be set by the client or by the proxy. For example, if X-Forwarded-For is client, proxy1, proxy2, req.ips would be ["client", "proxy1", "proxy2"], where proxy2 is the furthest downstream.
		req.method --> Contains a string corresponding to the HTTP method of the request: GET, POST, PUT, and so on.
		req.originalUrl --> This property is much like req.url; however, it retains the original request URL, allowing you to rewrite req.url freely for internal routing purposes. For example, the “mounting” feature of app.use() will rewrite req.url to strip the mount point.
		req.params --> This property is an object containing properties mapped to the named route “parameters”. For example, if you have the route /user/:name, then the “name” property is available as req.params.name. This object defaults to {}.
		req.path --> Contains the path part of the request URL.
		req.protocol --> Contains the request protocol string: either http or (for TLS requests) https. When the trust proxy setting does not evaluate to false, this property will use the value of the X-Forwarded-Proto header field if present. This header can be set by the client or by the proxy.
		req.query --> This property is an object containing a property for each query string parameter in the route. If there is no query string, it is the empty object, {}.
		req.route --> Contains the currently-matched route, a string. For example:
		req.secure --> A Boolean property that is true if a TLS connection is established. Equivalent to:
		req.signedCookies --> When using cookie-parser middleware, this property contains signed cookies sent by the request, unsigned and ready for use. Signed cookies reside in a different object to show developer intent; otherwise, a malicious attack could be placed on req.cookie values (which are easy to spoof). Note that signing a cookie does not make it “hidden” or encrypted; but simply prevents tampering (because the secret used to sign is private).
		req.stale --> Indicates whether the request is “stale,” and is the opposite of req.fresh. For more information, see req.fresh.
		req.subdomains --> An array of subdomains in the domain name of the request.
		req.xhr --> A Boolean property that is true if the request’s X-Requested-With header field is “XMLHttpRequest”, indicating that the request was issued by a client library such as jQuery.

	Methods:
		req.accepts(types) --> Checks if the specified content types are acceptable, based on the request’s Accept HTTP header field. The method returns the best match, or if none of the specified content types is acceptable, returns false (in which case, the application should respond with 406 "Not Acceptable").
		req.acceptsCharsets(charset [, ...]) --> Returns the first accepted charset of the specified character sets, based on the request’s Accept-Charset HTTP header field. If none of the specified charsets is accepted, returns false.
		req.acceptsEncodings(encoding [, ...]) --> Returns the first accepted encoding of the specified encodings, based on the request’s Accept-Encoding HTTP header field. If none of the specified encodings is accepted, returns false.
		req.acceptsLanguages(lang [, ...]) --> Returns the first accepted language of the specified languages, based on the request’s Accept-Language HTTP header field. If none of the specified languages is accepted, returns false.
		req.get(field) --> Returns the specified HTTP request header field (case-insensitive match). The Referrer and Referer fields are interchangeable.
		req.is(type) --> Returns true if the incoming request’s “Content-Type” HTTP header field matches the MIME type specified by the type parameter. Returns false otherwise.
		req.range(size[, options]) --> Range header parser. The size parameter is the maximum size of the resource. The options parameter is an object that can have the following properties.

Response
	Description:
		The res object represents the HTTP response that an Express app sends when it gets an HTTP request. In this documentation and by convention, the object is always referred to as res (and the HTTP request is req) but its actual name is determined by the parameters to the callback function in which you’re working.

	Properties:
		res.app --> This property holds a reference to the instance of the Express application that is using the middleware. res.app is identical to the req.app property in the request object.
		res.headersSent --> Boolean property that indicates if the app sent HTTP headers for the response.
		res.locals --> An object that contains response local variables scoped to the request, and therefore available only to the view(s) rendered during that request / response cycle (if any). Otherwise, this property is identical to app.locals. This property is useful for exposing request-level information such as the request path name, authenticated user, user settings, and so on.

	Methods:
		res.append(field [, value]) --> Appends the specified value to the HTTP response header field. If the header is not already set, it creates the header with the specified value. The value parameter can be a string or an array. Note: calling res.set() after res.append() will reset the previously-set header value.
		res.attachment([filename]) --> Sets the HTTP response Content-Disposition header field to “attachment”. If a filename is given, then it sets the Content-Type based on the extension name via res.type(), and sets the Content-Disposition “filename=” parameter.
		res.cookie(name, value [, options]) --> Sets cookie name to value. The value parameter may be a string or object converted to JSON. The options parameter is an object that can have the following properties.
		res.clearCookie(name [, options]) --> Clears the cookie specified by name. For details about the options object, see res.cookie().
		res.download(path [, filename] [, fn]) --> Transfers the file at path as an “attachment”. Typically, browsers will prompt the user for download. By default, the Content-Disposition header “filename=” parameter is path (this typically appears in the browser dialog). Override this default with the filename parameter. When an error occurs or transfer is complete, the method calls the optional callback function fn. This method uses res.sendFile() to transfer the file.
		res.end([data] [, encoding]) --> Ends the response process. This method actually comes from Node core, specifically the response.end() method of http.ServerResponse. Use to quickly end the response without any data. If you need to respond with data, instead use methods such as res.send() and res.json().
		res.format(object) --> Performs content-negotiation on the Accept HTTP header on the request object, when present. It uses req.accepts() to select a handler for the request, based on the acceptable types ordered by their quality values. If the header is not specified, the first callback is invoked. When no match is found, the server responds with 406 “Not Acceptable”, or invokes the default callback.
		res.get(field) --> Returns the HTTP response header specified by field. The match is case-insensitive.
		res.json([body]) --> Sends a JSON response. This method sends a response (with the correct content-type) that is the parameter converted to a JSON string using JSON.stringify(). The parameter can be any JSON type, including object, array, string, Boolean, or number, and you can also use it to convert other values to JSON, such as null, and undefined (although these are technically not valid JSON).
		res.jsonp([body]) --> Sends a JSON response with JSONP support. This method is identical to res.json(), except that it opts-in to JSONP callback support.
		res.links(links) --> Joins the links provided as properties of the parameter to populate the response’s Link HTTP header field.
		res.location(path) --> Sets the response Location HTTP header to the specified path parameter.
		res.redirect([status,] path) --> Redirects to the URL derived from the specified path, with specified status, a positive integer that corresponds to an HTTP status code . If not specified, status defaults to “302 “Found”.
		res.render(view [, locals] [, callback]) --> Renders a view and sends the rendered HTML string to the client. Optional parameters:
			locals, an object whose properties define local variables for the view.
			callback, a callback function. If provided, the method returns both the possible error and rendered string, but does not perform an automated response. When an error occurs, the method invokes next(err) internally.
			The view argument is a string that is the file path of the view file to render. This can be an absolute path, or a path relative to the views setting. If the path does not contain a file extension, then the view engine setting determines the file extension. If the path does contain a file extension, then Express will load the module for the specified template engine (via require()) and render it using the loaded module’s __express function.
		res.send([body]) --> Sends the HTTP response. The body parameter can be a Buffer object, a String, an object, or an Array.
		res.sendFile(path [, options] [, fn]) --> Transfers the file at the given path. Sets the Content-Type response HTTP header field based on the filename’s extension. Unless the root option is set in the options object, path must be an absolute path to the file.
		res.sendStatus(statusCode) --> Sets the response HTTP status code to statusCode and send its string representation as the response body.
		res.set(field [, value]) --> Sets the response’s HTTP header field to value. To set multiple fields at once, pass an object as the parameter.
		res.status(code) --> Sets the HTTP status for the response. It is a chainable alias of Node’s response.statusCode.
		res.type(type) --> Sets the Content-Type HTTP header to the MIME type as determined by mime.lookup() for the specified type. If type contains the “/” character, then it sets the Content-Type to type.
		res.vary(field) --> Adds the field to the Vary response header, if it is not there already.

Router
	Description:
		A router object is an isolated instance of middleware and routes. You can think of it as a “mini-application,” capable only of performing middleware and routing functions. Every Express application has a built-in app router.
		A router behaves like middleware itself, so you can use it as an argument to app.use() or as the argument to another router’s use() method.
		The top-level express object has a Router() method that creates a new router object.
		Once you’ve created a router object, you can add middleware and HTTP method routes (such as get, put, post, and so on) to it just like an application.

	Methods:
		router.all(path, [callback, ...] callback) --> This method is just like the router.METHOD() methods, except that it matches all HTTP methods (verbs). This method is extremely useful for mapping “global” logic for specific path prefixes or arbitrary matches. For example, if you placed the following route at the top of all other route definitions, it would require that all routes from that point on would require authentication, and automatically load a user. Keep in mind that these callbacks do not have to act as end points; loadUser can perform a task, then call next() to continue matching subsequent routes.
		router.METHOD(path, [callback, ...] callback) --> The router.METHOD() methods provide the routing functionality in Express, where METHOD is one of the HTTP methods, such as GET, PUT, POST, and so on, in lowercase. Thus, the actual methods are router.get(), router.post(), router.put(), and so on.
		router.param(name, callback) --> Adds callback triggers to route parameters, where name is the name of the parameter and callback is the callback function. Although name is technically optional, using this method without it is deprecated starting with Express v4.11.0 (see below).
			The parameters of the callback function are:
				req, the request object.
				res, the response object.
				next, indicating the next middleware function.
				The value of the name parameter.
				The name of the parameter.
		router.route(path) --> Returns an instance of a single route which you can then use to handle HTTP verbs with optional middleware. Use router.route() to avoid duplicate route naming and thus typing errors. Building on the router.param() example above, the following code shows how to use router.route() to specify various HTTP method handlers.
		router.use([path], [function, ...] function) --> Uses the specified middleware function or functions, with optional mount path path, that defaults to “/”.
			This method is similar to app.use(). A simple example and use case is described below. See app.use() for more information.
			Middleware is like a plumbing pipe: requests start at the first middleware function defined and work their way “down” the middleware stack processing for each path they match.
